@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:   <http://www.w3.org/ns/shacl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .

@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix fnml: <http://semweb.mmlab.be/ns/fnml#> .
@prefix fno: <https://w3id.org/function/ontology#> .

@prefix carml: <http://carml.taxonic.com/carml/> .

@prefix rmlsh: <http://www.taxonic.com/ns/rml-shacl#> .

rmlsh:
	rdfs:label "SHACL for RML"@en ;
	rdfs:comment "This shapes graph can be used to validate RML mapping graphs."@en ;
	sh:declare [
		sh:prefix "rmlsh" ;
		sh:namespace "http://www.taxonic.com/ns/rml-shacl#" ;
	] ;
.

rmlsh:TriplesMapShape
	a sh:NodeShape ;
	rdfs:label "Triples map shape"@en ;
	rdfs:comment "Defines constraints for a well-formed triples map."@en ;
	sh:message "TriplesMap is ill-formed." ;

	sh:targetClass rr:TriplesMap ;
	sh:targetSubjectsOf
		rr:logicalTable,
		rml:logicalSource,
		rr:subject,
		rr:subjectMap ;

	sh:property [
		sh:message "Triples map should have one and only one logical source." ;
		sh:path rml:logicalSource ;
		sh:minCount 1 ;
		sh:maxCount 1 ;
	] ;

	sh:xone (
		[
			sh:property [
				sh:path rr:subjectMap ;
				sh:minCount 1 ;
				sh:maxCount 1 ;
			]
		]
		[
			sh:property [
				sh:path rr:subject ;
				sh:minCount 1 ;
				sh:maxCount 1 ;
			]
		]
	) ;
.

rmlsh:TermMapShape
	a sh:NodeShape ;
	rdfs:label "Term map shape"@en ;
	rdfs:comment "Defines constraints for a well-formed term map."@en ;
	sh:message "Term map is ill-formed." ;

	# NOTE: We don't target object maps directly, because not all object maps are term maps;
	#       the range for `rr:objectMap` is `rr:ObjectMap` or `rr:RefObjectMap`

	sh:targetObjectsOf
		rr:subjectMap ,
		rr:predicateMap ,
		rr:graphMap ;

	sh:targetClass
		rr:SubjectMap ,
		rr:PredicateMap ,
		rr:GraphMap ;

	sh:targetSubjectsOf
		rr:constant ,
		rml:reference ,
		rr:template ,
		rr:termType ,
		fnml:functionValue ;

	sh:xone (
		[
			sh:property [
				sh:path rr:constant ;
				sh:minCount 1 ;
				sh:maxCount 1 ;
			]
		]
		[
			sh:property [
				sh:path rml:reference ;
				sh:minCount 1 ;
				sh:maxCount 1 ;
			]
		]
		[
			sh:property [
				sh:path rr:template ;
				sh:minCount 1 ;
				sh:maxCount 1 ;
			]
		]
		[
			sh:property [
				sh:path fnml:functionValue ;
				sh:minCount 1 ;
				sh:maxCount 1 ;
			]
		]
		[
			sh:property [
				sh:path carml:multiReference ;
				sh:minCount 1 ;
				sh:maxCount 1 ;
			]
		]
		[
			sh:property [
				sh:path carml:multiTemplate ;
				sh:minCount 1 ;
				sh:maxCount 1 ;
			]
		]
		[
			sh:property [
				sh:path carml:multiFunctionValue ;
				sh:minCount 1 ;
				sh:maxCount 1 ;
			]
		]
	) ;
.

rmlsh:TermMapTermTypeShape
	a sh:NodeShape ;
	sh:targetSubjectsOf rr:termType ;
	sh:property [
		sh:message "Term map may have at most one value for rr:termType." ;
		sh:path rr:termType ;
		sh:maxCount 1 ;
	]
.

rmlsh:ObjectOrRefObjectMapShape
	a sh:NodeShape ;
	# TODO: PM: could we not use sh:targetObjectsOf?
	sh:targetSubjectsOf rr:objectMap ;

	sh:xone (
		[
			sh:property [
				sh:path rr:objectMap ;
				sh:node rmlsh:TermMapShape, rmlsh:ObjectMapShape ;
			]
		]
		[
			sh:property [
				sh:path rr:objectMap ;
				sh:node rmlsh:RefObjectMapShape ;
			]
		]
	) ;
.

rmlsh:SubjectMapShape
	a sh:NodeShape ;
	rdfs:label "Subject map shape"@en ;
	rdfs:comment "Defines constraints for a well-formed subject map."@en ;
	sh:message "Subject map is ill-formed" ;

	sh:targetObjectsOf rr:subjectMap ;
	sh:targetClass     rr:SubjectMap ;

	sh:property
		[
			sh:message "Value for rr:termType on subject map should be rr:IRI or rr:BlankNode." ;
			sh:path rr:termType ;
			sh:in ( rr:IRI rr:BlankNode ) ;
		] ,
		[
			sh:message "Value of rr:class in subject map should be an IRI" ;
			sh:path rr:class ;
			sh:nodeKind sh:IRI ;
		] ;
.

rmlsh:ObjectMapShape
	a sh:NodeShape ;
	rdfs:label "Object map shape"@en ;
	rdfs:comment "Defines constraints for a well-formed object map."@en ;
	sh:message "Object map is ill-formed" ;

	sh:property [
		sh:message "Value for rr:termType on subject map should be rr:IRI or rr:BlankNode or rr:Literal." ;
		sh:path rr:termType ;
		sh:in ( rr:IRI rr:BlankNode rr:Literal ) ;
	] ;

	# @INCOMPLETE
	# sh:xone (
	# 	[
	# 		sh:property [
	# 			sh:path rr:termType ;
	# 			sh:in (rr:IRI rr:BlankNode)
	# 		]
	# 	]
	# 	[
	# 		sh:property [
	# 			sh:path rr:termType ;
	# 			sh:maxCount 0 ;
	# 		]
	# 	]
	# 	[
	# 		sh:property [
	# 			sh:path rr:datatype ;
	# 			sh:minCount 1 ;
	# 			sh:nodeKind sh:IRI ;
	# 		]
	# 	]
	# 	[
	# 		sh:property [
	# 			sh:path rr:datatype ;
	# 			sh:minCount 1 ;
	# 			sh:nodeKind sh:IRI ;
	# 		]
	# 	]
	# )
.

rmlsh:RefObjectMapShape
	a sh:NodeShape ;
	rdfs:label "Ref object map shape"@en ;
	rdfs:comment "Defines constraints for a well-formed ref object map."@en ;
	sh:message "Referencing object map is ill-formed" ;

	sh:targetClass rr:RefObjectMap ;
	sh:targetSubjectsOf rr:parentTriplesMap, rr:joinCondition, carml:multiJoinCondition ;
	sh:targetObjectsOf rr:refObjectMap ;

	sh:property
		[
			sh:message "Referencing object map should have one and only one parent triples map." ;
			sh:path rr:parentTriplesMap ;
			sh:minCount 1 ;
			sh:maxCount 1 ;
		] ,
		[
			sh:message "Value of rr:parentTriplesMap op referencing object map should be rr:IRI." ;
			sh:path rr:parentTriplesMap ;
			sh:nodeKind sh:IRI ;
		] ;
.

rmlsh:PredicateMapShape
	a sh:NodeShape ;
	rdfs:label "Predicate map shape"@en ;
	rdfs:comment "Defines constraints for a well-formed predicate map."@en ;
	sh:message "Predicate map is ill-formed" ;

	sh:targetObjectsOf rr:predicateMap ;

	sh:property [
		sh:message "Value for rr:termType on predicate map should be rr:IRI." ;
		sh:path rr:termType ;
		sh:in ( rr:IRI ) ;
	] ;
.

rmlsh:PredicateObjectMapShape
	a sh:NodeShape ;
	rdfs:label "Predicate object map shape"@en ;
	rdfs:comment "Defines constraints for a well-formed predicate object map."@en ;
	sh:message "Predicate object map is ill-formed" ;

	sh:targetSubjectsOf rr:predicate, rr:predicateMap, rr:object, rr:objectMap ;
	sh:targetObjectsOf  rr:predicateObjectMap ;
	sh:targetClass rr:PredicateObjectMap ;

	sh:property
		[
			sh:message "Predicate object map should have at least one predicate map." ;
			sh:path [
				sh:alternativePath (rr:predicate rr:predicateMap) ;
			] ;
			sh:minCount 1 ;
		] ,
		[
			sh:message "Predicate object map should have at least one object map." ;
			sh:path [
				sh:alternativePath (rr:object rr:objectMap) ;
			] ;
			sh:minCount 1 ;
		] ;
.

rmlsh:BaseSourceShape
	a sh:NodeShape ;
	rdfs:label "Base source shape"@en ;
	rdfs:comment "Defines constraints for a well-formed base source."@en ;
.

rmlsh:LogicalSourceShape
	a sh:NodeShape ;
	rdfs:label "Logical source shape"@en ;
	rdfs:comment "Defines constraints for a well-formed logical source."@en ;
	sh:message "Logical source is ill-formed" ;

	sh:targetClass rml:LogicalSource ;
	sh:targetObjectsOf rml:logicalSource ;
	sh:targetSubjectsOf rml:source ;

	# @NOTE: The iterator and referenceFormulation could be required, based on the rml:source. These
	#        constraints will be checked at run time, and will cause a run time error when violated.
	sh:property
		[
			sh:message "LogicalSource should have one and only one source." ;
			sh:path rml:source ;
			sh:minCount 1;
			sh:maxCount 1;
		] ,
		[
			sh:message "Logical source's source should be either a source location string or a valid carml stream description" ;
			sh:path rml:source ;
			sh:or (
				[
					sh:nodeKind sh:Literal ;
					sh:datatype xsd:string ;
				]

				[
					sh:node rmlsh:CarmlStreamShape ;
				]
			)
		] ,
		[
			sh:message "LogicalSource should have at most one iterator." ;
			sh:path rml:iterator ;
			sh:maxCount 1;
		] ,
		[
			sh:message "LogicalSource should have at most one reference formulation." ;
			sh:path rml:referenceFormulation ;
			sh:maxCount 1 ;

			# @NOTE: The namespace sets the range to `rml:ReferenceFormulation`, but in practice, this
			#        class does not have any special characteristic. From a practical perspective, it
			#        seems useful to allow any IRI.
			sh:nodeKind sh:IRI ;
		] ;
.

rmlsh:CarmlStreamShape
 	a sh:NodeShape ;
	sh:targetClass carml:Stream ;
	sh:message "Carml stream is ill-formed." ;
	sh:property
		[
			sh:path rdf:type ;
			sh:minCount 1 ;
			sh:hasValue carml:Stream ;
		] ,
		[
			sh:message "Carlm stream can have at most one stream name.";
			sh:path carml:streamName ;
			sh:maxCount 1 ;
			sh:nodeKind sh:Literal ;
			sh:datatype xsd:string ;
		] ;
.

# rmlsh:ReferenceFormulationShape
# 	a sh:NodeShape ;
# 	rdfs:label "Reference formulation shape"@en ;
# 	rdfs:comment "Defines constraints for a well-formed reference formulation."@en;
# .

rmlsh:GraphMapShape
	a sh:NodeShape ;
	rdfs:label "Graph map shape"@en ;
	rdfs:comment "Defines constraints for a well-formed graph map."@en ;
	sh:message "Graph map is ill-formed" ;

	sh:targetClass rr:GraphMap ;
	sh:targetObjectsOf rr:graphMap ;

	sh:property [
		sh:message "Value for rr:termType on graph map should be rr:IRI." ;
		sh:path rr:termType ;
		sh:in ( rr:IRI ) ;
	] ;
.

rmlsh:JoinShape
	a sh:NodeShape ;
	rdfs:label "Join shape"@en ;
	rdfs:comment "Defines constraints for a well-formed join "@en ;
	sh:message "Join is ill-formed" ;

	sh:targetClass rr:Join ;
	sh:targetSubjectsOf rr:parent, rr:child ;
	sh:targetObjectsOf rr:joinCondition ;

	sh:property
		[
			sh:message "Join should have one and only one child." ;
			sh:path rr:child ;
			sh:minCount 1 ;
			sh:maxCount 1 ;
		] ,
		[
			sh:message "Value of child in join should be a literal value." ;
			sh:path rr:child ;
			sh:nodeKind sh:Literal ;
		] ,
		[
			sh:message "Join should have one and only one parent." ;
			sh:path rr:parent ;
			sh:minCount 1 ;
			sh:maxCount 1 ;
		] ,
		[
			sh:message "Join should have at least one parent." ;
			sh:path rr:parent ;
			sh:nodeKind sh:Literal ;
		] ;
.

rmlsh:ConstantSubjectPredicateOrGraphShape
	a sh:PropertyShape ;
	rdfs:label "Constant value shape for subject, predicate or graph mappings"@en ;
	rdfs:comment "Defines constraints for a well-formed constant value for a subject, predicate or graph mapping."@en ;
	sh:message "A triple with an RML shorthand constant as predicate should have an IRI in the object position." ;

	sh:path rr:constant, rr:subject, rr:predicate,  rr:graph ;
	sh:nodeKind sh:IRI ;
.

rmlsh:ConstantObjectShape
	a sh:PropertyShape ;
	rdfs:label "Constant value shape for object mappings"@en ;
	rdfs:comment "Defines constraints for a well-formed constant value for an object mapping."@en ;
 	sh:message "Constant value for object mapping is ill-formed" ;

	sh:targetObjectsOf rr:object ;

	sh:xone ( [ sh:nodeKind sh:IRI ; ] [ sh:nodeKind sh:literal ] )
.

rmlsh:FunctionTermMapShape
	a sh:NodeShape ;
	sh:targetObjectsOf fnml:functionValue ;
	sh:message "Functional term map is ill-formed." ;
	sh:property [
		sh:message "Functional term map should have one and only one function executing predicate object map." ;
		sh:path rr:predicateObjectMap ;
		sh:qualifiedMinCount  1 ;
		sh:qualifiedMaxCount  1 ;
		sh:qualifiedValueShape rmlsh:FunctionExecutionPOM ;
	];
.

rmlsh:FunctionExecutionPOM
	sh:or	(
		[
			sh:path rr:predicate ;
			sh:hasValue fno:executes ;
		]
		[
		 	sh:path (rr:predicateMap rr:constant ) ;
			sh:hasValue fno:executes ;
		]
	) ;
.
